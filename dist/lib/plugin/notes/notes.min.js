'use strict';

/**
 * Handles opening of and synchronization with the reveal.js
 * notes window.
 *
 * Handshake process:
 * 1. This window posts 'connect' to notes window
 *    - Includes URL of presentation to show
 * 2. Notes window responds with 'connected' when it is available
 * 3. This window proceeds to send the current presentation state
 *    to the notes window
 */
var RevealNotes = function () {

	function openNotes(notesFilePath) {

		if (!notesFilePath) {
			var jsFileLocation = document.querySelector('script[src$="notes.js"]').src; // this js file path
			jsFileLocation = jsFileLocation.replace(/notes\.js(\?.*)?$/, ''); // the js folder path
			notesFilePath = jsFileLocation + 'notes.html';
		}

		var notesPopup = window.open(notesFilePath, 'reveal.js - Notes', 'width=1100,height=700');

		/**
   * Connect to the notes window through a postmessage handshake.
   * Using postmessage enables us to work in situations where the
   * origins differ, such as a presentation being opened from the
   * file system.
   */
		function connect() {
			// Keep trying to connect until we get a 'connected' message back
			var connectInterval = setInterval(function () {
				notesPopup.postMessage(JSON.stringify({
					namespace: 'reveal-notes',
					type: 'connect',
					url: window.location.protocol + '//' + window.location.host + window.location.pathname + window.location.search,
					state: Reveal.getState()
				}), '*');
			}, 500);

			window.addEventListener('message', function (event) {
				var data = JSON.parse(event.data);
				if (data && data.namespace === 'reveal-notes' && data.type === 'connected') {
					clearInterval(connectInterval);
					onConnected();
				}
			});
		}

		/**
   * Posts the current slide data to the notes window
   */
		function post() {

			var slideElement = Reveal.getCurrentSlide(),
			    notesElement = slideElement.querySelector('aside.notes');

			var messageData = {
				namespace: 'reveal-notes',
				type: 'state',
				notes: '',
				markdown: false,
				whitespace: 'normal',
				state: Reveal.getState()
			};

			// Look for notes defined in a slide attribute
			if (slideElement.hasAttribute('data-notes')) {
				messageData.notes = slideElement.getAttribute('data-notes');
				messageData.whitespace = 'pre-wrap';
			}

			// Look for notes defined in an aside element
			if (notesElement) {
				messageData.notes = notesElement.innerHTML;
				messageData.markdown = typeof notesElement.getAttribute('data-markdown') === 'string';
			}

			notesPopup.postMessage(JSON.stringify(messageData), '*');
		}

		/**
   * Called once we have established a connection to the notes
   * window.
   */
		function onConnected() {

			// Monitor events that trigger a change in state
			Reveal.addEventListener('slidechanged', post);
			Reveal.addEventListener('fragmentshown', post);
			Reveal.addEventListener('fragmenthidden', post);
			Reveal.addEventListener('overviewhidden', post);
			Reveal.addEventListener('overviewshown', post);
			Reveal.addEventListener('paused', post);
			Reveal.addEventListener('resumed', post);

			// Post the initial state
			post();
		}

		connect();
	}

	if (!/receiver/i.test(window.location.search)) {

		// If the there's a 'notes' query set, open directly
		if (window.location.search.match(/(\?|\&)notes/gi) !== null) {
			openNotes();
		}

		// Open the notes when the 's' key is hit
		document.addEventListener('keydown', function (event) {
			// Disregard the event if the target is editable or a
			// modifier is present
			if (document.querySelector(':focus') !== null || event.shiftKey || event.altKey || event.ctrlKey || event.metaKey) return;

			// Disregard the event if keyboard is disabled
			if (Reveal.getConfig().keyboard === false) return;

			if (event.keyCode === 83) {
				event.preventDefault();
				openNotes();
			}
		}, false);

		// Show our keyboard shortcut in the reveal.js help overlay
		if (window.Reveal) Reveal.registerKeyboardShortcut('S', 'Speaker notes view');
	}

	return { open: openNotes };
}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFFQTs7QUFFRCxLQUFJLENBQUMsWUFBWSxJQUFaLENBQWtCLE9BQU8sUUFBUCxDQUFnQixNQUFsQyxDQUFMLEVBQWtEOzs7QUFHakQsTUFBSSxPQUFPLFFBQVAsQ0FBZ0IsTUFBaEIsQ0FBdUIsS0FBdkIsQ0FBOEIsZ0JBQTlCLE1BQXFELElBQXpELEVBQWdFO0FBQy9EO0FBQ0E7OztBQUdELFdBQVMsZ0JBQVQsQ0FBMkIsU0FBM0IsRUFBc0MsVUFBVSxLQUFWLEVBQWtCOzs7QUFHdkQsT0FBSyxTQUFTLGFBQVQsQ0FBd0IsUUFBeEIsTUFBdUMsSUFBdkMsSUFBK0MsTUFBTSxRQUFyRCxJQUFpRSxNQUFNLE1BQXZFLElBQWlGLE1BQU0sT0FBdkYsSUFBa0csTUFBTSxPQUE3RyxFQUF1SDs7O0FBR3ZILE9BQUssT0FBTyxTQUFQLEdBQW1CLFFBQW5CLEtBQWdDLEtBQXJDLEVBQTZDOztBQUU3QyxPQUFJLE1BQU0sT0FBTixLQUFrQixFQUF0QixFQUEyQjtBQUMxQixVQUFNLGNBQU47QUFDQTtBQUNBO0FBQ0QsR0FaRCxFQVlHLEtBWkg7OztBQWVBLE1BQUksT0FBTyxNQUFYLEVBQW9CLE9BQU8sd0JBQVAsQ0FBaUMsR0FBakMsRUFBc0Msb0JBQXRDO0FBRXBCOztBQUVELFFBQU8sRUFBRSxNQUFNLFNBQVIsRUFBUDtBQUVBLENBNUhpQixFQUFsQiIsImZpbGUiOiJwbHVnaW4vbm90ZXMvbm90ZXMubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBIYW5kbGVzIG9wZW5pbmcgb2YgYW5kIHN5bmNocm9uaXphdGlvbiB3aXRoIHRoZSByZXZlYWwuanNcbiAqIG5vdGVzIHdpbmRvdy5cbiAqXG4gKiBIYW5kc2hha2UgcHJvY2VzczpcbiAqIDEuIFRoaXMgd2luZG93IHBvc3RzICdjb25uZWN0JyB0byBub3RlcyB3aW5kb3dcbiAqICAgIC0gSW5jbHVkZXMgVVJMIG9mIHByZXNlbnRhdGlvbiB0byBzaG93XG4gKiAyLiBOb3RlcyB3aW5kb3cgcmVzcG9uZHMgd2l0aCAnY29ubmVjdGVkJyB3aGVuIGl0IGlzIGF2YWlsYWJsZVxuICogMy4gVGhpcyB3aW5kb3cgcHJvY2VlZHMgdG8gc2VuZCB0aGUgY3VycmVudCBwcmVzZW50YXRpb24gc3RhdGVcbiAqICAgIHRvIHRoZSBub3RlcyB3aW5kb3dcbiAqL1xudmFyIFJldmVhbE5vdGVzID0gKGZ1bmN0aW9uKCkge1xuXG5cdGZ1bmN0aW9uIG9wZW5Ob3Rlcyggbm90ZXNGaWxlUGF0aCApIHtcblxuXHRcdGlmKCAhbm90ZXNGaWxlUGF0aCApIHtcblx0XHRcdHZhciBqc0ZpbGVMb2NhdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3NjcmlwdFtzcmMkPVwibm90ZXMuanNcIl0nKS5zcmM7ICAvLyB0aGlzIGpzIGZpbGUgcGF0aFxuXHRcdFx0anNGaWxlTG9jYXRpb24gPSBqc0ZpbGVMb2NhdGlvbi5yZXBsYWNlKC9ub3Rlc1xcLmpzKFxcPy4qKT8kLywgJycpOyAgIC8vIHRoZSBqcyBmb2xkZXIgcGF0aFxuXHRcdFx0bm90ZXNGaWxlUGF0aCA9IGpzRmlsZUxvY2F0aW9uICsgJ25vdGVzLmh0bWwnO1xuXHRcdH1cblxuXHRcdHZhciBub3Rlc1BvcHVwID0gd2luZG93Lm9wZW4oIG5vdGVzRmlsZVBhdGgsICdyZXZlYWwuanMgLSBOb3RlcycsICd3aWR0aD0xMTAwLGhlaWdodD03MDAnICk7XG5cblx0XHQvKipcblx0XHQgKiBDb25uZWN0IHRvIHRoZSBub3RlcyB3aW5kb3cgdGhyb3VnaCBhIHBvc3RtZXNzYWdlIGhhbmRzaGFrZS5cblx0XHQgKiBVc2luZyBwb3N0bWVzc2FnZSBlbmFibGVzIHVzIHRvIHdvcmsgaW4gc2l0dWF0aW9ucyB3aGVyZSB0aGVcblx0XHQgKiBvcmlnaW5zIGRpZmZlciwgc3VjaCBhcyBhIHByZXNlbnRhdGlvbiBiZWluZyBvcGVuZWQgZnJvbSB0aGVcblx0XHQgKiBmaWxlIHN5c3RlbS5cblx0XHQgKi9cblx0XHRmdW5jdGlvbiBjb25uZWN0KCkge1xuXHRcdFx0Ly8gS2VlcCB0cnlpbmcgdG8gY29ubmVjdCB1bnRpbCB3ZSBnZXQgYSAnY29ubmVjdGVkJyBtZXNzYWdlIGJhY2tcblx0XHRcdHZhciBjb25uZWN0SW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG5vdGVzUG9wdXAucG9zdE1lc3NhZ2UoIEpTT04uc3RyaW5naWZ5KCB7XG5cdFx0XHRcdFx0bmFtZXNwYWNlOiAncmV2ZWFsLW5vdGVzJyxcblx0XHRcdFx0XHR0eXBlOiAnY29ubmVjdCcsXG5cdFx0XHRcdFx0dXJsOiB3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgKyAnLy8nICsgd2luZG93LmxvY2F0aW9uLmhvc3QgKyB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUgKyB3aW5kb3cubG9jYXRpb24uc2VhcmNoLFxuXHRcdFx0XHRcdHN0YXRlOiBSZXZlYWwuZ2V0U3RhdGUoKVxuXHRcdFx0XHR9ICksICcqJyApO1xuXHRcdFx0fSwgNTAwICk7XG5cblx0XHRcdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAnbWVzc2FnZScsIGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdFx0dmFyIGRhdGEgPSBKU09OLnBhcnNlKCBldmVudC5kYXRhICk7XG5cdFx0XHRcdGlmKCBkYXRhICYmIGRhdGEubmFtZXNwYWNlID09PSAncmV2ZWFsLW5vdGVzJyAmJiBkYXRhLnR5cGUgPT09ICdjb25uZWN0ZWQnICkge1xuXHRcdFx0XHRcdGNsZWFySW50ZXJ2YWwoIGNvbm5lY3RJbnRlcnZhbCApO1xuXHRcdFx0XHRcdG9uQ29ubmVjdGVkKCk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBQb3N0cyB0aGUgY3VycmVudCBzbGlkZSBkYXRhIHRvIHRoZSBub3RlcyB3aW5kb3dcblx0XHQgKi9cblx0XHRmdW5jdGlvbiBwb3N0KCkge1xuXG5cdFx0XHR2YXIgc2xpZGVFbGVtZW50ID0gUmV2ZWFsLmdldEN1cnJlbnRTbGlkZSgpLFxuXHRcdFx0XHRub3Rlc0VsZW1lbnQgPSBzbGlkZUVsZW1lbnQucXVlcnlTZWxlY3RvciggJ2FzaWRlLm5vdGVzJyApO1xuXG5cdFx0XHR2YXIgbWVzc2FnZURhdGEgPSB7XG5cdFx0XHRcdG5hbWVzcGFjZTogJ3JldmVhbC1ub3RlcycsXG5cdFx0XHRcdHR5cGU6ICdzdGF0ZScsXG5cdFx0XHRcdG5vdGVzOiAnJyxcblx0XHRcdFx0bWFya2Rvd246IGZhbHNlLFxuXHRcdFx0XHR3aGl0ZXNwYWNlOiAnbm9ybWFsJyxcblx0XHRcdFx0c3RhdGU6IFJldmVhbC5nZXRTdGF0ZSgpXG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBMb29rIGZvciBub3RlcyBkZWZpbmVkIGluIGEgc2xpZGUgYXR0cmlidXRlXG5cdFx0XHRpZiggc2xpZGVFbGVtZW50Lmhhc0F0dHJpYnV0ZSggJ2RhdGEtbm90ZXMnICkgKSB7XG5cdFx0XHRcdG1lc3NhZ2VEYXRhLm5vdGVzID0gc2xpZGVFbGVtZW50LmdldEF0dHJpYnV0ZSggJ2RhdGEtbm90ZXMnICk7XG5cdFx0XHRcdG1lc3NhZ2VEYXRhLndoaXRlc3BhY2UgPSAncHJlLXdyYXAnO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBub3RlcyBkZWZpbmVkIGluIGFuIGFzaWRlIGVsZW1lbnRcblx0XHRcdGlmKCBub3Rlc0VsZW1lbnQgKSB7XG5cdFx0XHRcdG1lc3NhZ2VEYXRhLm5vdGVzID0gbm90ZXNFbGVtZW50LmlubmVySFRNTDtcblx0XHRcdFx0bWVzc2FnZURhdGEubWFya2Rvd24gPSB0eXBlb2Ygbm90ZXNFbGVtZW50LmdldEF0dHJpYnV0ZSggJ2RhdGEtbWFya2Rvd24nICkgPT09ICdzdHJpbmcnO1xuXHRcdFx0fVxuXG5cdFx0XHRub3Rlc1BvcHVwLnBvc3RNZXNzYWdlKCBKU09OLnN0cmluZ2lmeSggbWVzc2FnZURhdGEgKSwgJyonICk7XG5cblx0XHR9XG5cblx0XHQvKipcblx0XHQgKiBDYWxsZWQgb25jZSB3ZSBoYXZlIGVzdGFibGlzaGVkIGEgY29ubmVjdGlvbiB0byB0aGUgbm90ZXNcblx0XHQgKiB3aW5kb3cuXG5cdFx0ICovXG5cdFx0ZnVuY3Rpb24gb25Db25uZWN0ZWQoKSB7XG5cblx0XHRcdC8vIE1vbml0b3IgZXZlbnRzIHRoYXQgdHJpZ2dlciBhIGNoYW5nZSBpbiBzdGF0ZVxuXHRcdFx0UmV2ZWFsLmFkZEV2ZW50TGlzdGVuZXIoICdzbGlkZWNoYW5nZWQnLCBwb3N0ICk7XG5cdFx0XHRSZXZlYWwuYWRkRXZlbnRMaXN0ZW5lciggJ2ZyYWdtZW50c2hvd24nLCBwb3N0ICk7XG5cdFx0XHRSZXZlYWwuYWRkRXZlbnRMaXN0ZW5lciggJ2ZyYWdtZW50aGlkZGVuJywgcG9zdCApO1xuXHRcdFx0UmV2ZWFsLmFkZEV2ZW50TGlzdGVuZXIoICdvdmVydmlld2hpZGRlbicsIHBvc3QgKTtcblx0XHRcdFJldmVhbC5hZGRFdmVudExpc3RlbmVyKCAnb3ZlcnZpZXdzaG93bicsIHBvc3QgKTtcblx0XHRcdFJldmVhbC5hZGRFdmVudExpc3RlbmVyKCAncGF1c2VkJywgcG9zdCApO1xuXHRcdFx0UmV2ZWFsLmFkZEV2ZW50TGlzdGVuZXIoICdyZXN1bWVkJywgcG9zdCApO1xuXG5cdFx0XHQvLyBQb3N0IHRoZSBpbml0aWFsIHN0YXRlXG5cdFx0XHRwb3N0KCk7XG5cblx0XHR9XG5cblx0XHRjb25uZWN0KCk7XG5cblx0fVxuXG5cdGlmKCAhL3JlY2VpdmVyL2kudGVzdCggd2luZG93LmxvY2F0aW9uLnNlYXJjaCApICkge1xuXG5cdFx0Ly8gSWYgdGhlIHRoZXJlJ3MgYSAnbm90ZXMnIHF1ZXJ5IHNldCwgb3BlbiBkaXJlY3RseVxuXHRcdGlmKCB3aW5kb3cubG9jYXRpb24uc2VhcmNoLm1hdGNoKCAvKFxcP3xcXCYpbm90ZXMvZ2kgKSAhPT0gbnVsbCApIHtcblx0XHRcdG9wZW5Ob3RlcygpO1xuXHRcdH1cblxuXHRcdC8vIE9wZW4gdGhlIG5vdGVzIHdoZW4gdGhlICdzJyBrZXkgaXMgaGl0XG5cdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ2tleWRvd24nLCBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHQvLyBEaXNyZWdhcmQgdGhlIGV2ZW50IGlmIHRoZSB0YXJnZXQgaXMgZWRpdGFibGUgb3IgYVxuXHRcdFx0Ly8gbW9kaWZpZXIgaXMgcHJlc2VudFxuXHRcdFx0aWYgKCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCAnOmZvY3VzJyApICE9PSBudWxsIHx8IGV2ZW50LnNoaWZ0S2V5IHx8IGV2ZW50LmFsdEtleSB8fCBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgKSByZXR1cm47XG5cblx0XHRcdC8vIERpc3JlZ2FyZCB0aGUgZXZlbnQgaWYga2V5Ym9hcmQgaXMgZGlzYWJsZWRcblx0XHRcdGlmICggUmV2ZWFsLmdldENvbmZpZygpLmtleWJvYXJkID09PSBmYWxzZSApIHJldHVybjtcblxuXHRcdFx0aWYoIGV2ZW50LmtleUNvZGUgPT09IDgzICkge1xuXHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRvcGVuTm90ZXMoKTtcblx0XHRcdH1cblx0XHR9LCBmYWxzZSApO1xuXG5cdFx0Ly8gU2hvdyBvdXIga2V5Ym9hcmQgc2hvcnRjdXQgaW4gdGhlIHJldmVhbC5qcyBoZWxwIG92ZXJsYXlcblx0XHRpZiggd2luZG93LlJldmVhbCApIFJldmVhbC5yZWdpc3RlcktleWJvYXJkU2hvcnRjdXQoICdTJywgJ1NwZWFrZXIgbm90ZXMgdmlldycgKTtcblxuXHR9XG5cblx0cmV0dXJuIHsgb3Blbjogb3Blbk5vdGVzIH07XG5cbn0pKCk7XG4iXX0=
