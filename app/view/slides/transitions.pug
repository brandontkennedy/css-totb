- var section = 'transitions'
- var title = 'Transitions'

section(class=section)
  .c-slide__header--no-body
    h1.t-color=title
    h3.fragment A change in property values over a specified duration of time<br>instead of occurring immediately

  aside.notes
    ul
      li what are they?
      li for example, that definition had a transition on it to make the opacity fade from 0 to 1



section(class=section)
  .c-slide__header.t-bg-color
    h4.c-slide__header--topic=title
    h3.c-slide__header--slide Why bother?
  .c-slide__body
    .c-slide__content
      .d-flex--center.d-flex--spaced
        div
          button.c-button.c-example--transitions--no.t-bg-color.t-box-shadow--hover No Transition
        div
          button.c-button.c-example--transitions--yes.t-bg-color.t-box-shadow--hover Yes Transition

  aside.notes
    ul
      li they just make things FEEL nicer
      li for example, when these slides change they are using transitions



section(class=section)
  .c-slide__header.t-bg-color
    h4.c-slide__header--topic=title
    h3.c-slide__header--slide Syntax
  .c-slide__body
    .c-slide__content
      .d-flex__column--center
        pre.fragment
          code.css.
            .defaults {
              transition-property: all;
              transition-duration: 0s;
              transition-timing-function: ease;
              transition-delay: 0s;
            }
        pre.fragment
          code.css.
            .shorthand {
              transition: all 0s ease 0s;
            }

  aside.notes
    small
      ul
        li default properites
        li shorthand



//- specifying what will transition (all the things?, just the color?)
section(class=section)
  .c-slide__header.t-bg-color
    h4.c-slide__header--topic=title
    h3.c-slide__header--slide Specifying What Changes
  .c-slide__body
    .c-slide__content
      .d-flex--even
        div
          button.c-button.t-bg-color.c-example--transitions Default
        .u-icon--arrow-right.o-flex--center-y
        div
          button.c-button.t-bg-color.c-example--transitions.is-hover Hovered

  aside.notes
    ul
      li our next examples will be using buttons, :hover, '1s', and 'linear'




section(class=section)
  .c-slide__header.t-bg-color
    h4.c-slide__header--topic=title
    h3.c-slide__header--slide Specifying What Changes
  .c-slide__body
    .c-slide__content
      div.u-offset--2.fragment
        button.c-button.t-bg-color.c-example--transitions--one Just One Thing
        pre
          code.sass.
            button:hover {
              transition: background 1s linear;
            }
      div.u-offset--2.fragment
        button.c-button.t-bg-color.c-example--transitions--two More Than One Thing
        pre
          code.sass.
            button:hover {
              transition: background 1s linear, transform 1s linear;
            }
      div.u-offset--2.fragment
        button.c-button.t-bg-color.c-example--transitions--all Everything Different
        pre
          code.sass.
            button:hover {
              transition: all 1s linear;
            }

  aside.notes
    ul
      li safe thought: if it can be defined numerically
      li notice that each thing transitions evenly from the original to the hover state as well as from the hover state back to the original.  we can change that too.



//- making a different transition happen in different states (like stopping hovering) - different out than in
section(class=section)
  .c-slide__header.t-bg-color
    h4.c-slide__header--topic=title
    h3.c-slide__header--slide Different Reverse Transitions
  .c-slide__body
    .c-slide__content
      div
        button.c-button.t-bg-color.c-example--transitions--reverse Different Things
        pre
          code.scss.
            button {
              transition: background 1s linear;
            
              &:hover {
                transition: all 1s linear;
              }
            }

  aside.notes
    ul
      li all the things on hover
      li ONLY background on return



//- timing functions - what they are
section(class=section)
  .c-slide__header.t-bg-color
    h4.c-slide__header--topic=title
    h3.c-slide__header--slide Timing Functions
  .c-slide__body
    .c-slide__content
      h3.fragment How to handle the progress of the transition over time
      .o-container
        .c-timing-block.slide-in
          .fragment
            .c-timing.c-timing--ease
              span.t-color.t-border-color ease
          .fragment
            .c-timing.c-timing--ease-in
              span.t-color.t-border-color ease-in
          .fragment
            .c-timing.c-timing--ease-out
              span.t-color.t-border-color ease-out
          .fragment
            .c-timing.c-timing--ease-in-out
              span.t-color.t-border-color ease-in-out
          .fragment
            .c-timing.c-timing--linear
              span.t-color.t-border-color linear
          .fragment
            .c-timing.c-timing--step
              span.t-color.t-border-color steps()
          .fragment
            .slide-in.c-timing.c-timing--cubic
              span.t-color.t-border-color cubic-bezier()
        
        .c-timing-block.fragment.slide-back.o-container--horizontal
          .c-timing.c-timing--ease
            span.t-bg-color ease
          .c-timing.c-timing--ease-in
            span.t-bg-color ease-in
          .c-timing.c-timing--ease-out
            span.t-bg-color ease-out
          .c-timing.c-timing--ease-in-out
            span.t-bg-color ease-in-out
          .c-timing.c-timing--linear
            span.t-bg-color linear
          .c-timing.c-timing--step
            span.t-bg-color steps()
          .c-timing.c-timing--cubic
            span.t-bg-color cubic-bezier()
          

  aside.notes
    ul
      li there a few keyword functions
      li cubic-bezier can be tricky to master, but gives you a lot more control over how your transitions progress
      li lets see all of them at the same time but way slower



//- //- timing functions - when to use what (if time)
//- section(class=section)
//-   .c-slide__header
//-     h4=title
//-     h2 When To Use Which Timing
//-   .c-slide__body
//-     .c-slide__content
//-       //- things entering screen - ease-out is best
//-       //- things leaving screen - ease-in
//-       //- things moving on the screen - ease-in-out
//-       //- things that repeat - linear (more for animations)
//-       //- fancier things like 'bounce' - cubic-bezier
//-       
//-       
//-       .d-flex--center.d-flex--spaced.d-flex--wrap
//-         div
//-           button.c-button.transition--back Different Things
//-           pre
//-             code.scss.
//-               button {
//-                 transition: box-shadow 1s linear;
//-               
//-                 &:hover {
//-                   transition: all 1s linear;
//-                 }
//-               }
//- 
//-   aside.notes
//-     ul
//-       li i generally just use 'ease-in-out'
